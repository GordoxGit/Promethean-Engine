name: build-and-test

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    name: Build ${{ matrix.os }} - ${{ matrix.build_type }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        build_type: [Debug, Release]

    steps:
      # 1. Checkout du code source
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      # 2. Setup CMake
      - name: Setup CMake
        uses: jwlawson/actions-setup-cmake@v2
        with:
          cmake-version: '3.28.x'

      # 3. Setup Ninja
      - name: Setup Ninja
        uses: seanmiddleditch/gha-setup-ninja@v5
        if: runner.os == 'Windows'

      - name: Install Ninja (Linux/macOS)
        if: runner.os != 'Windows'
        run: sudo apt-get update && sudo apt-get install -y ninja-build

      # 4. Setup MSVC sur Windows
      - name: Setup MSVC Dev Environment
        if: runner.os == 'Windows'
        uses: ilammy/msvc-dev-cmd@v1

      # 5. Cache pour vcpkg
      - name: Cache vcpkg
        uses: actions/cache@v4
        with:
          path: |
            ${{ github.workspace }}/vcpkg
            ~/vcpkg
            ~/.cache/vcpkg
            ~/AppData/Local/vcpkg
          key: ${{ runner.os }}-vcpkg-${{ hashFiles('**/vcpkg.json') }}-${{ hashFiles('**/CMakeLists.txt') }}
          restore-keys: |
            ${{ runner.os }}-vcpkg-

      # 6. Setup vcpkg (si vcpkg.json existe)
      - name: Check for vcpkg.json
        id: check_vcpkg
        run: |
          if [ -f "vcpkg.json" ]; then
            echo "vcpkg_exists=true" >> $GITHUB_OUTPUT
          else
            echo "vcpkg_exists=false" >> $GITHUB_OUTPUT
          fi
        shell: bash

      # 6.5. Install Linux build dependencies
      - name: Install Linux build dependencies
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            autoconf \
            automake \
            libtool \
            pkg-config \
            build-essential
        shell: bash

      # 7. Bootstrap vcpkg si nécessaire
      - name: Bootstrap vcpkg
        if: steps.check_vcpkg.outputs.vcpkg_exists == 'true'
        run: |
          if [ ! -d "vcpkg" ]; then
            git clone https://github.com/Microsoft/vcpkg.git
          fi
          ./vcpkg/bootstrap-vcpkg.sh || ./vcpkg/bootstrap-vcpkg.bat
        shell: bash

      # 8. Install dependencies from vcpkg.json
      - name: Install vcpkg dependencies
        if: steps.check_vcpkg.outputs.vcpkg_exists == 'true'
        shell: bash
        run: |
          ./vcpkg/vcpkg install --x-manifest-root="${{ github.workspace }}" \
                                --x-install-root="${{ github.workspace }}/vcpkg_installed"

      # 9. Configure CMake
      - name: Configure CMake
        run: |
          VCPKG_TOOLCHAIN=""
          if [ -f "vcpkg.json" ] && [ -d "vcpkg" ]; then
            VCPKG_TOOLCHAIN="-DCMAKE_TOOLCHAIN_FILE=${{ github.workspace }}/vcpkg/scripts/buildsystems/vcpkg.cmake"
          fi
          
          cmake -B build \
                -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
                $VCPKG_TOOLCHAIN \
                ${{ runner.os == 'Windows' && '-G "Visual Studio 17 2022" -A x64' || '-G Ninja' }}
        shell: bash

      # 10. Build
      - name: Build
        run: cmake --build build --config ${{ matrix.build_type }} --parallel 4

      # 11. Run tests (si des tests existent)
      - name: Run tests
        run: |
          cd build
          if [ -f "CTestTestfile.cmake" ]; then
            ctest -C ${{ matrix.build_type }} --output-on-failure --verbose
          else
            echo "No tests found, skipping..."
          fi
        shell: bash
        continue-on-error: true

      # 12. Upload artifacts
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: promethean-${{ matrix.os }}-${{ matrix.build_type }}
          path: |
            build/bin/
            build/**/*.exe
            build/**/*.dll
            build/**/*.so
            build/**/*.dylib
          retention-days: 7
          if-no-files-found: warn

  # Les autres jobs restent identiques...

  # Job séparé pour la compilation Android
  build-android:
    name: Build Android
    runs-on: ubuntu-latest
    strategy:
      matrix:
        abi: [arm64-v8a, armeabi-v7a]
        build_type: [Debug, Release]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Setup JDK
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: Setup Android NDK
        run: |
          echo "y" | $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --install "ndk;25.2.9519653"
          echo "ANDROID_NDK_HOME=$ANDROID_HOME/ndk/25.2.9519653" >> $GITHUB_ENV
          echo "Using NDK at $ANDROID_HOME/ndk/25.2.9519653"

      - name: Bootstrap vcpkg
        run: |
          if [ ! -d "vcpkg" ]; then
            git clone https://github.com/Microsoft/vcpkg.git
          fi
          ./vcpkg/bootstrap-vcpkg.sh

      - name: Install vcpkg dependencies
        run: |
          ./vcpkg/vcpkg install --x-manifest-root="${{ github.workspace }}" \
                                --x-install-root="${{ github.workspace }}/vcpkg_installed"

      - name: Cache Gradle
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}

      - name: Configure CMake for Android
        run: |
          export ANDROID_ABI=${{ matrix.abi }}
          export BUILD_TYPE=${{ matrix.build_type }}
          cmake --preset android-arm64-v8a \
            -DCMAKE_TOOLCHAIN_FILE=${{ github.workspace }}/vcpkg/scripts/buildsystems/vcpkg.cmake \
            -DCMAKE_C_COMPILER=clang \
            -DCMAKE_CXX_COMPILER=clang++
          cmake --version
          echo "NDK path: $ANDROID_NDK_HOME"

      - name: Build Android
        run: cmake --build --preset android-arm64-v8a --parallel 4

      - name: Upload Android artifacts
        uses: actions/upload-artifact@v4
        with:
          name: promethean-android-${{ matrix.abi }}-${{ matrix.build_type }}
          path: |
            build-android/**/*.so
            build-android/**/*.a
          retention-days: 7

  # Job pour l'analyse de code
  code-quality:
    name: Code Quality Analysis
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup clang-tidy
        run: |
          sudo apt-get update
          sudo apt-get install -y clang-tidy cppcheck

      - name: Run clang-tidy
        run: |
          find src -name '*.cpp' -o -name '*.h' | xargs clang-tidy -p build --checks='-*,modernize-*,performance-*,readability-*'
        continue-on-error: true

      - name: Run cppcheck
        run: |
          cppcheck --enable=all --suppress=missingIncludeSystem --error-exitcode=1 src/
        continue-on-error: true
