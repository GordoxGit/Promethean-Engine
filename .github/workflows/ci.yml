name: build-and-test

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  CMAKE_VERSION: '3.28.x'

jobs:
  build:
    name: Build ${{ matrix.os }} - ${{ matrix.build_type }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        build_type: [Debug, Release]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Export GitHub Actions cache environment variables
        uses: actions/github-script@v7
        with:
          script: |
            core.exportVariable('ACTIONS_CACHE_URL', process.env.ACTIONS_CACHE_URL || '');
            core.exportVariable('ACTIONS_RUNTIME_TOKEN', process.env.ACTIONS_RUNTIME_TOKEN || '');

      - name: Setup CMake
        uses: jwlawson/actions-setup-cmake@v2
        with:
          cmake-version: ${{ env.CMAKE_VERSION }}

      # Installation des dépendances système optimisée par plateforme
      - name: Install system dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            ninja-build \
            build-essential \
            autoconf \
            automake \
            libtool \
            pkg-config \
            curl \
            zip \
            unzip \
            tar \
            git

      - name: Install system dependencies (macOS)
        if: runner.os == 'macOS'
        run: |
          brew install ninja autoconf automake libtool pkg-config

      - name: Setup Ninja (Windows)
        if: runner.os == 'Windows'
        uses: seanmiddleditch/gha-setup-ninja@v5

      - name: Setup MSVC Dev Environment
        if: runner.os == 'Windows'
        uses: ilammy/msvc-dev-cmd@v1

      # Cache vcpkg optimisé avec binary sources
      - name: Cache vcpkg
        uses: actions/cache@v4
        with:
          path: |
            ${{ github.workspace }}/vcpkg
            ${{ github.workspace }}/vcpkg_installed
            ~/.cache/vcpkg
          key: vcpkg-${{ runner.os }}-${{ hashFiles('**/vcpkg.json') }}-${{ hashFiles('**/.github/workflows/ci.yml') }}
          restore-keys: |
            vcpkg-${{ runner.os }}-${{ hashFiles('**/vcpkg.json') }}-
            vcpkg-${{ runner.os }}-

      # Bootstrap vcpkg robuste
      - name: Bootstrap vcpkg
        run: |
          if [ ! -d "vcpkg" ]; then
            echo "Cloning vcpkg..."
            git clone https://github.com/Microsoft/vcpkg.git
          fi
          
          cd vcpkg
          
          # Update vcpkg to latest stable if needed
          git fetch origin
          
          if [ "$RUNNER_OS" = "Windows" ]; then
            if [ ! -f "vcpkg.exe" ]; then
              echo "Bootstrapping vcpkg on Windows..."
              ./bootstrap-vcpkg.bat
            fi
          else
            if [ ! -f "vcpkg" ]; then
              echo "Bootstrapping vcpkg on Unix..."
              ./bootstrap-vcpkg.sh
            fi
          fi
          
          # Verify vcpkg is working
          ./vcpkg version
        shell: bash

      # Installation des dépendances vcpkg avec retry
      - name: Install vcpkg dependencies
        shell: bash
        run: |
          cd vcpkg
          
          # Integrate vcpkg
          ./vcpkg integrate install || true
          
          # Install dependencies from manifest with proper feature flags
          echo "Installing dependencies from manifest..."
          ./vcpkg install \
            --x-manifest-root="${{ github.workspace }}" \
            --x-install-root="${{ github.workspace }}/vcpkg_installed" \
            --debug \
            --feature-flags=manifests,versions || {
            echo "First attempt failed, retrying with verbose output..."
            ./vcpkg install \
              --x-manifest-root="${{ github.workspace }}" \
              --x-install-root="${{ github.workspace }}/vcpkg_installed" \
              --debug \
              --verbose \
              --feature-flags=manifests,versions
          }

      # Configuration CMake robuste multiplateforme
      - name: Configure CMake
        run: |
          echo "Configuring CMake for $RUNNER_OS..."
          
          TOOLCHAIN_FILE="${{ github.workspace }}/vcpkg/scripts/buildsystems/vcpkg.cmake"
          
          if [ ! -f "$TOOLCHAIN_FILE" ]; then
            echo "Error: vcpkg toolchain file not found at $TOOLCHAIN_FILE"
            exit 1
          fi
          
          if [ "$RUNNER_OS" = "Windows" ]; then
            cmake -B build \
                  -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
                  -DCMAKE_TOOLCHAIN_FILE="$TOOLCHAIN_FILE" \
                  -DVCPKG_TARGET_TRIPLET=x64-windows \
                  -DPROMETHEAN_BUILD_TESTS=ON \
                  -DPROMETHEAN_BUILD_EXAMPLES=ON \
                  -G "Visual Studio 17 2022" -A x64
          else
            cmake -B build \
                  -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
                  -DCMAKE_TOOLCHAIN_FILE="$TOOLCHAIN_FILE" \
                  -DPROMETHEAN_BUILD_TESTS=ON \
                  -DPROMETHEAN_BUILD_EXAMPLES=ON \
                  -G Ninja
          fi
        shell: bash

      # Vérification de la configuration
      - name: Verify build configuration
        run: |
          echo "=== Build Configuration Verification ==="
          echo "Build directory contents:"
          ls -la build/ || echo "Build directory not found"
          
          echo "CMake cache verification:"
          if [ -f "build/CMakeCache.txt" ]; then
            grep -i "sdl2\|spdlog\|vcpkg" build/CMakeCache.txt || echo "Dependencies not found in cache"
          fi
          
          echo "vcpkg installed packages:"
          if [ -d "vcpkg_installed" ]; then
            find vcpkg_installed -name "*.pc" | head -10 || echo "No pkg-config files found"
          fi
        shell: bash
        continue-on-error: true

      # Build avec gestion d'erreur
      - name: Build
        run: |
          echo "Building project..."
          cmake --build build --config ${{ matrix.build_type }} --parallel 4 --verbose
        shell: bash

      # Tests avec environnement headless
      - name: Run tests
        run: |
          cd build
          
          # Set up headless environment for different platforms
          if [ "$RUNNER_OS" = "Linux" ]; then
            export SDL_VIDEODRIVER=dummy
            export DISPLAY=:99
          elif [ "$RUNNER_OS" = "macOS" ]; then
            export SDL_VIDEODRIVER=dummy
          fi
          
          if [ -f "CTestTestfile.cmake" ]; then
            echo "Running tests with CTest..."
            ctest -C ${{ matrix.build_type }} \
                  --output-on-failure \
                  --verbose \
                  --timeout 300 \
                  --parallel 2
          else
            echo "No CTest found, trying direct execution..."
            if [ -f "bin/engine_tests" ] || [ -f "bin/engine_tests.exe" ] || [ -f "bin/engine_tests_d" ] || [ -f "bin/engine_tests_d.exe" ]; then
              echo "Found test executable, running directly..."
              ./bin/engine_tests* || echo "Direct test execution failed"
            else
              echo "No test executable found"
              ls -la bin/ || echo "No bin directory"
            fi
          fi
        shell: bash
        continue-on-error: true

      # Upload artifacts avec chemins corrects
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: promethean-${{ matrix.os }}-${{ matrix.build_type }}
          path: |
            build/bin/promethean*
            build/lib/*
            build/**/*.exe
            build/**/*.dll
            build/**/*.so
            build/**/*.dylib
            build/Release/promethean*
            build/Debug/promethean*
          retention-days: 7
          if-no-files-found: warn

  # Build Android CORRIGÉ
  build-android:
    name: Build Android (${{ matrix.abi }}, ${{ matrix.build_type }})
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        abi: [arm64-v8a, armeabi-v7a]
        build_type: [Debug, Release]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Setup JDK
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      # Configuration Android NDK robuste
      - name: Setup Android NDK
        run: |
          echo "Setting up Android NDK..."
          
          # Install NDK
          echo "y" | $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --install "ndk;25.2.9519653"
          
          # Set environment variables
          NDK_PATH="$ANDROID_HOME/ndk/25.2.9519653"
          echo "ANDROID_NDK_HOME=$NDK_PATH" >> $GITHUB_ENV
          echo "ANDROID_NDK_ROOT=$NDK_PATH" >> $GITHUB_ENV
          echo "NDK_ROOT=$NDK_PATH" >> $GITHUB_ENV
          
          # Verify NDK installation
          if [ -d "$NDK_PATH" ]; then
            echo "✅ Android NDK successfully installed at: $NDK_PATH"
            ls -la "$NDK_PATH"
          else
            echo "❌ Android NDK installation failed"
            exit 1
          fi

      # Installation des dépendances système pour Android
      - name: Install build dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            ninja-build \
            build-essential \
            autoconf \
            automake \
            libtool \
            pkg-config \
            curl \
            zip \
            unzip \
            tar \
            git

      # Cache vcpkg pour Android
      - name: Cache vcpkg (Android)
        uses: actions/cache@v4
        with:
          path: ${{ github.workspace }}/vcpkg-android
          key: vcpkg-android-${{ matrix.abi }}-${{ hashFiles('**/vcpkg.json') }}
          restore-keys: |
            vcpkg-android-${{ matrix.abi }}-
            vcpkg-android-

      # Bootstrap vcpkg pour Android
      - name: Bootstrap vcpkg (Android)
        run: |
          VCPKG_DIR="vcpkg-android"
          if [ ! -d "$VCPKG_DIR" ]; then
            echo "Cloning vcpkg for Android build into $VCPKG_DIR..."
            git clone https://github.com/Microsoft/vcpkg.git "$VCPKG_DIR"
          fi
          
          cd "$VCPKG_DIR"
          
          if [ ! -f "vcpkg" ]; then
            echo "Bootstrapping vcpkg..."
            ./bootstrap-vcpkg.sh
          fi
          
          # Verify vcpkg is working
          ./vcpkg version

      # CORRECTION: Installation vcpkg en mode manifest pour Android
      - name: Install vcpkg dependencies for Android
        run: |
          # Détermine le triplet correct
          if [ "${{ matrix.abi }}" = "arm64-v8a" ]; then
            TRIPLET="arm64-android"
          else
            TRIPLET="arm-android"
          fi
          
          echo "Installing dependencies for Android ${{ matrix.abi }} (triplet: $TRIPLET)..."
          
          cd vcpkg-android
          
          # Vérifie le chemin du NDK et du toolchain
          if [ ! -d "$ANDROID_NDK_HOME" ]; then
            echo "Error: Android NDK not found at $ANDROID_NDK_HOME"
            exit 1
          fi
          ANDROID_TOOLCHAIN_FILE="$ANDROID_NDK_HOME/build/cmake/android.toolchain.cmake"
          if [ ! -f "$ANDROID_TOOLCHAIN_FILE" ]; then
            echo "Error: Android NDK toolchain file not found at $ANDROID_TOOLCHAIN_FILE"
            exit 1
          fi

          # CORRECTION: Passer la configuration du toolchain Android à vcpkg et améliorer la relance
          echo "Installing dependencies from manifest for Android..."
          ./vcpkg install \
            --x-manifest-root="${{ github.workspace }}" \
            --triplet=$TRIPLET \
            --debug \
            --feature-flags=-compilertracking \
            --x-cmake-args="-DVCPKG_CHAINLOAD_TOOLCHAIN_FILE=$ANDROID_TOOLCHAIN_FILE" \
            --x-cmake-args="-DANDROID_ABI=${{ matrix.abi }}" \
            --x-cmake-args="-DANDROID_PLATFORM=android-21" \
            --x-cmake-args="-DANDROID_STL=c++_shared" || {
            echo "Manifest install failed, retrying with verbose output..."
            ./vcpkg install \
              --x-manifest-root="${{ github.workspace }}" \
              --triplet=$TRIPLET \
              --debug \
              --verbose \
              --feature-flags=-compilertracking \
              --x-cmake-args="-DVCPKG_CHAINLOAD_TOOLCHAIN_FILE=$ANDROID_TOOLCHAIN_FILE" \
              --x-cmake-args="-DANDROID_ABI=${{ matrix.abi }}" \
              --x-cmake-args="-DANDROID_PLATFORM=android-21" \
              --x-cmake-args="-DANDROID_STL=c++_shared"
          }

      # Configuration CMake pour Android
      - name: Configure CMake for Android
        run: |
          # Determine correct triplet
          if [ "${{ matrix.abi }}" = "arm64-v8a" ]; then
            TRIPLET="arm64-android"
          else
            TRIPLET="arm-android"
          fi
          
          echo "Configuring CMake for Android ${{ matrix.abi }}..."
          
          # Verify NDK path
          if [ ! -d "$ANDROID_NDK_HOME" ]; then
            echo "Error: Android NDK not found at $ANDROID_NDK_HOME"
            exit 1
          fi
          
          # Verify toolchain files
          VCPKG_TOOLCHAIN="${{ github.workspace }}/vcpkg-android/scripts/buildsystems/vcpkg.cmake"
          ANDROID_TOOLCHAIN="$ANDROID_NDK_HOME/build/cmake/android.toolchain.cmake"
          
          if [ ! -f "$VCPKG_TOOLCHAIN" ]; then
            echo "Error: vcpkg toolchain not found at $VCPKG_TOOLCHAIN"
            exit 1
          fi
          
          if [ ! -f "$ANDROID_TOOLCHAIN" ]; then
            echo "Error: Android toolchain not found at $ANDROID_TOOLCHAIN"
            exit 1
          fi
          
          # Configure CMake
          cmake -B build-android-${{ matrix.abi }} \
                -DCMAKE_TOOLCHAIN_FILE="$VCPKG_TOOLCHAIN" \
                -DVCPKG_CHAINLOAD_TOOLCHAIN_FILE="$ANDROID_TOOLCHAIN" \
                -DVCPKG_TARGET_TRIPLET="$TRIPLET" \
                -DANDROID_ABI=${{ matrix.abi }} \
                -DANDROID_PLATFORM=android-21 \
                -DANDROID_STL=c++_shared \
                -DANDROID_CPP_FEATURES="rtti exceptions" \
                -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
                -DCMAKE_ANDROID_NDK="$ANDROID_NDK_HOME" \
                -DPROMETHEAN_BUILD_TESTS=OFF \
                -DPROMETHEAN_BUILD_EXAMPLES=OFF \
                -G Ninja

      # Build Android
      - name: Build Android
        run: |
          echo "Building for Android ${{ matrix.abi }}..."
          cmake --build build-android-${{ matrix.abi }} --parallel 4 --verbose

      # Upload artifacts Android
      - name: Upload Android artifacts
        uses: actions/upload-artifact@v4
        with:
          name: promethean-android-${{ matrix.abi }}-${{ matrix.build_type }}
          path: |
            build-android-${{ matrix.abi }}/**/*.so
            build-android-${{ matrix.abi }}/**/*.a
            build-android-${{ matrix.abi }}/bin/*
            build-android-${{ matrix.abi }}/lib/*
          retention-days: 7

  # Job d'analyse de code amélioré
  code-quality:
    name: Code Quality Analysis
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install analysis tools
        run: |
          sudo apt-get update
          sudo apt-get install -y clang-tidy cppcheck

      - name: Run clang-tidy
        run: |
          if [ -d "src" ]; then
            echo "Running clang-tidy on source files..."
            find src -name '*.cpp' -o -name '*.h' | \
            head -20 | \
            xargs clang-tidy \
              --checks='-*,modernize-*,performance-*,readability-*,bugprone-*' \
              --header-filter='.*' || true
          else
            echo "No src directory found"
          fi
        continue-on-error: true

      - name: Run cppcheck
        run: |
          if [ -d "src" ]; then
            echo "Running cppcheck analysis..."
            cppcheck --enable=warning,style,performance \
                     --suppress=missingIncludeSystem \
                     --suppress=unmatchedSuppression \
                     --suppress=unusedFunction \
                     --error-exitcode=0 \
                     --inline-suppr \
                     --quiet \
                     src/ || true
          fi
        continue-on-error: true

      # Vérification des conventions de nommage
      - name: Check naming conventions
        run: |
          echo "Checking C++ naming conventions..."
          # Vérifier les classes en PascalCase
          if find src -name "*.h" -exec grep -l "class [a-z]" {} \; | head -5; then
            echo "⚠️  Found classes not in PascalCase"
          fi
          # Vérifier les membres privés avec m_
          if find src -name "*.h" -exec grep -l "private:.*[^m_][a-zA-Z]" {} \; | head -5; then
            echo "⚠️  Found private members without m_ prefix"
          fi
        continue-on-error: true
