name: build-and-test

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  CMAKE_VERSION: '3.28.x'
  # La variable VCPKG_BINARY_SOURCES est supprimée car obsolète

jobs:
  # Job pour les plateformes Desktop (Windows, Linux, macOS)
  build:
    name: Build ${{ matrix.os }} - ${{ matrix.build_type }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        build_type: [Debug, Release]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Export GitHub Actions cache environment variables
        uses: actions/github-script@v7
        with:
          script: |
            core.exportVariable('ACTIONS_CACHE_URL', process.env.ACTIONS_CACHE_URL || '');
            core.exportVariable('ACTIONS_RUNTIME_TOKEN', process.env.ACTIONS_RUNTIME_TOKEN || '');

      - name: Setup CMake
        uses: jwlawson/actions-setup-cmake@v2
        with:
          cmake-version: ${{ env.CMAKE_VERSION }}

      - name: Install system dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            ninja-build build-essential autoconf automake libtool pkg-config \
            curl zip unzip tar git m4 gettext gawk bison flex \
            libgl1-mesa-dev libx11-dev libxext-dev libxrandr-dev \
            libxi-dev libxcursor-dev libxinerama-dev

      - name: Install system dependencies (macOS)
        if: runner.os == 'macOS'
        run: |
          brew install ninja autoconf automake libtool pkg-config

      - name: Setup Ninja (Windows)
        if: runner.os == 'Windows'
        uses: seanmiddleditch/gha-setup-ninja@v5

      - name: Setup MSVC Dev Environment
        if: runner.os == 'Windows'
        uses: ilammy/msvc-dev-cmd@v1

      - name: Cache vcpkg
        uses: actions/cache@v4
        with:
          path: |
            ${{ github.workspace }}/vcpkg
            ${{ github.workspace }}/vcpkg_installed
            ~/.cache/vcpkg
            ~/AppData/Local/vcpkg
          key: vcpkg-cache-${{ runner.os }}-${{ hashFiles('**/vcpkg.json') }}-v4
          restore-keys: |
            vcpkg-cache-${{ runner.os }}-

      - name: Bootstrap vcpkg
        run: |
          if [ ! -d "vcpkg" ]; then
            git clone https://github.com/Microsoft/vcpkg.git
            cd vcpkg
          else
            cd vcpkg
            git fetch
            git checkout master
            git pull
          fi
          ./bootstrap-vcpkg.sh -disableMetrics
        shell: bash

      - name: Install vcpkg dependencies
        run: |
          cd vcpkg
          ./vcpkg install --x-manifest-root="${{ github.workspace }}" --x-install-root="${{ github.workspace }}/vcpkg_installed"
        shell: bash

      - name: Configure CMake
        run: |
          TOOLCHAIN_FILE="${{ github.workspace }}/vcpkg/scripts/buildsystems/vcpkg.cmake"
          if [ "$RUNNER_OS" = "Windows" ]; then
            cmake -B build -G "Visual Studio 17 2022" -A x64 \
                  -DCMAKE_TOOLCHAIN_FILE="$TOOLCHAIN_FILE" \
                  -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
                  -DVCPKG_INSTALLED_DIR="${{ github.workspace }}/vcpkg_installed"
          else
            cmake -B build -G Ninja \
                  -DCMAKE_TOOLCHAIN_FILE="$TOOLCHAIN_FILE" \
                  -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
                  -DVCPKG_INSTALLED_DIR="${{ github.workspace }}/vcpkg_installed"
          fi
        shell: bash

      - name: Build
        run: cmake --build build --config ${{ matrix.build_type }} --parallel

      - name: Run tests
        if: matrix.os != 'Windows'
        run: |
          cd build
          export SDL_VIDEODRIVER=dummy
          export DISPLAY=
          ctest -C ${{ matrix.build_type }} --output-on-failure --verbose
        shell: bash

  # === JOB ANDROID COMPLET ET FONCTIONNEL ===
  build-android:
    name: Build Android (${{ matrix.abi }}, ${{ matrix.build_type }})
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        abi: [arm64-v8a]
        build_type: [Release, Debug]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Export GitHub Actions cache environment variables
        uses: actions/github-script@v7
        with:
          script: |
            core.exportVariable('ACTIONS_CACHE_URL', process.env.ACTIONS_CACHE_URL || '');
            core.exportVariable('ACTIONS_RUNTIME_TOKEN', process.env.ACTIONS_RUNTIME_TOKEN || '');

      - name: Setup JDK and Android SDK
        uses: android-actions/setup-android@v3

      - name: Setup Android NDK
        run: |
          ANDROID_NDK_VERSION="25.2.9519653"
          echo "y" | $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --install "ndk;${ANDROID_NDK_VERSION}"
          NDK_PATH="$ANDROID_HOME/ndk/${ANDROID_NDK_VERSION}"
          echo "ANDROID_NDK_HOME=$NDK_PATH" >> $GITHUB_ENV
          echo "ANDROID_NDK_ROOT=$NDK_PATH" >> $GITHUB_ENV
          if [ ! -d "$NDK_PATH" ]; then echo "❌ Android NDK installation failed"; exit 1; fi
          echo "✅ Android NDK successfully installed at: $NDK_PATH"

      - name: Install build dependencies
        run: |
          sudo apt-get update 
          sudo apt-get install -y ninja-build cmake build-essential

      - name: Cache vcpkg for Android
        uses: actions/cache@v4
        with:
          path: |
            ${{ github.workspace }}/vcpkg
            ${{ github.workspace }}/vcpkg_installed
          key: vcpkg-android-${{ matrix.abi }}-${{ hashFiles('**/vcpkg.json') }}-v4
          restore-keys: |
            vcpkg-android-${{ matrix.abi }}-

      - name: Bootstrap vcpkg
        run: |
          if [ ! -d "vcpkg" ]; then
            git clone https://github.com/Microsoft/vcpkg.git
            cd vcpkg
          else
            cd vcpkg
            git fetch
            git checkout master
            git pull
          fi
          ./bootstrap-vcpkg.sh -disableMetrics
        shell: bash

      - name: Install vcpkg dependencies for Android
        run: |
          if [ "${{ matrix.abi }}" = "arm64-v8a" ]; then 
            TRIPLET="arm64-android"
          else 
            TRIPLET="arm-android"
          fi
          
          echo "Installing dependencies for Android ${{ matrix.abi }} (triplet: $TRIPLET)..."
          
          cd vcpkg
          
          ./vcpkg install \
            --x-manifest-root="${{ github.workspace }}" \
            --triplet=$TRIPLET \
            --x-install-root="${{ github.workspace }}/vcpkg_installed"
        env:
          ANDROID_NDK_HOME: ${{ env.ANDROID_NDK_HOME }}
          VCPKG_CMAKE_SYSTEM_NAME: Android

      - name: Configure CMake for Android
        run: |
          if [ "${{ matrix.abi }}" = "arm64-v8a" ]; then 
            TRIPLET="arm64-android"
          else 
            TRIPLET="arm-android"
          fi
          
          VCPKG_TOOLCHAIN_FILE="${{ github.workspace }}/vcpkg/scripts/buildsystems/vcpkg.cmake"
          ANDROID_TOOLCHAIN_FILE="${ANDROID_NDK_HOME}/build/cmake/android.toolchain.cmake"
          
          cmake -B build-android -G Ninja \
            -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
            -DCMAKE_TOOLCHAIN_FILE="$VCPKG_TOOLCHAIN_FILE" \
            -DVCPKG_CHAINLOAD_TOOLCHAIN_FILE="$ANDROID_TOOLCHAIN_FILE" \
            -DVCPKG_TARGET_TRIPLET="$TRIPLET" \
            -DVCPKG_INSTALLED_DIR="${{ github.workspace }}/vcpkg_installed" \
            -DANDROID_ABI="${{ matrix.abi }}" \
            -DANDROID_PLATFORM=android-21 \
            -DANDROID_STL=c++_shared \
            -DPROMETHEAN_BUILD_TESTS=OFF \
            -DPROMETHEAN_BUILD_EXAMPLES=OFF

      - name: Build Android
        run: cmake --build build-android --config ${{ matrix.build_type }} --parallel

      - name: Upload Android artifacts
        uses: actions/upload-artifact@v4
        with:
          name: promethean-android-${{ matrix.abi }}-${{ matrix.build_type }}
          path: |
            build-android/lib/*.so
            build-android/lib/*.a
          retention-days: 7
          if-no-files-found: warn
