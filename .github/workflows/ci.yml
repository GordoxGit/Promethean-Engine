name: build-and-test

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        type: [Debug, Release]
    
    runs-on: ${{ matrix.os }}
    
    steps:
      # 1. Checkout du code source
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive
      
      # 2. Setup CMake et Ninja
      - name: Setup CMake
        uses: jwlawson/actions-setup-cmake@v2
        with:
          cmake-version: '3.25'
      
      - name: Setup Ninja
        uses: seanmiddleditch/gha-setup-ninja@master
      
      # 3. Setup ccache (version corrigée)
      - name: Setup ccache
        uses: hendrikmuhs/ccache-action@v1.2
        with:
          key: ${{ matrix.os }}-${{ matrix.type }}
          verbose: 2
      
      # 4. Setup vcpkg
      - name: Setup vcpkg
        uses: lukka/run-vcpkg@v11
        with:
          vcpkgJsonGlob: '**/vcpkg.json'
          runVcpkgInstall: true
      
      # 5. Platform-specific setup
      - name: Setup MSVC (Windows only)
        if: matrix.os == 'windows-latest'
        uses: microsoft/setup-msbuild@v1.1
      
      - name: Setup Linux dependencies
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libgl1-mesa-dev \
            libx11-dev \
            libxrandr-dev \
            libxinerama-dev \
            libxcursor-dev \
            libxi-dev \
            libasound2-dev
      
      # 6. Configure CMake
      - name: Configure CMake
        run: |
          cmake -S . -B build -G Ninja \
                -DCMAKE_BUILD_TYPE=${{ matrix.type }} \
                -DCMAKE_C_COMPILER_LAUNCHER=ccache \
                -DCMAKE_CXX_COMPILER_LAUNCHER=ccache \
                -DCMAKE_TOOLCHAIN_FILE=${{ env.VCPKG_ROOT }}/scripts/buildsystems/vcpkg.cmake \
                -DBUILD_TESTING=ON
      
      # 7. Build le projet
      - name: Build
        run: cmake --build build --config ${{ matrix.type }} --parallel
      
      # 8. Run tests (si disponibles)
      - name: Run tests
        run: ctest --test-dir build --output-on-failure --parallel
        continue-on-error: true
      
      # 9. Upload artifacts (uniquement pour Release)
      - name: Upload build artifacts
        if: matrix.type == 'Release'
        uses: actions/upload-artifact@v4
        with:
          name: promethean-engine-${{ matrix.os }}-${{ matrix.type }}
          path: |
            build/bin/
            build/*.exe
            build/*.app
          retention-days: 7

  # Job séparé pour l'analyse statique
  static-analysis:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Clang tools
        run: |
          sudo apt-get update
          sudo apt-get install -y clang-tidy cppcheck
      
      - name: Run clang-tidy
        run: |
          find src -name "*.cpp" -o -name "*.h" | head -10 | xargs clang-tidy || true
      
      - name: Run cppcheck
        run: |
          cppcheck --enable=warning,style --inconclusive --xml src/ 2> cppcheck-report.xml || true
      
      - name: Upload analysis results
        uses: actions/upload-artifact@v4
        with:
          name: static-analysis-results
          path: cppcheck-report.xml

  # Job pour vérifier le formatage du code
  format-check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup clang-format
        run: sudo apt-get install -y clang-format
