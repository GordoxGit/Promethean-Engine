name: build-and-test

on:
  push:   { branches: [ main ] }
  pull_request:

jobs:
  build:
    strategy:
      matrix:
        os:   [ubuntu-latest, windows-latest, macos-latest]
        type: [Debug, Release]
    runs-on: ${{ matrix.os }}

    steps:
      # 1) Récupération du dépôt
      - uses: actions/checkout@v4                                   # :contentReference[oaicite:0]{index=0}

      # 2) CMake + Ninja récents (cache interne)
      - name: Install CMake & Ninja
        uses: lukka/get-cmake@v3                                     # :contentReference[oaicite:1]{index=1}

      # 3) ccache pour compils incrémentales
      - name: Setup ccache
        uses: hendrikmuhs/ccache-action@v2                           # :contentReference[oaicite:2]{index=2}
        with:
          verbose: true

      # 4) vcpkg : installe les libs listées dans vcpkg.json + active le binary-cache
      - name: Setup & run vcpkg
        uses: lukka/run-vcpkg@v11                                    # :contentReference[oaicite:3]{index=3}
        with:
          vcpkgJsonGlob: '**/vcpkg.json'
          runVcpkgInstall: true

      # 5) Configuration CMake (s’appuie sur CMakePresets si dispo)
      - name: Configure
        run: >
          cmake -S . -B build
          -G Ninja
          -DCMAKE_BUILD_TYPE=${{ matrix.type }}
          -DCMAKE_C_COMPILER_LAUNCHER=ccache
          -DCMAKE_CXX_COMPILER_LAUNCHER=ccache
          -DCMAKE_TOOLCHAIN_FILE=$VCPKG_ROOT/scripts/buildsystems/vcpkg.cmake

      # 6) Analyse statique clang-tidy (facultatif en Release)
      - name: clang-tidy
        if: matrix.type == 'Debug'
        uses: HorstBaerbel/action-clang-tidy@v6                      # :contentReference[oaicite:4]{index=4}
        with:
          buildDir: build
          failOnError: false       # commente les warnings mais n’échoue pas

      # 7) Compilation
      - name: Build
        run: cmake --build build --config ${{ matrix.type }}

      # 8) Tests unitaires (GoogleTest)
      - name: Run tests
        run: ctest --test-dir build --output-on-failure

      # 9) Rapport couverture (Debug Linux uniquement : lcov + gcovr)
      - name: Coverage
        if: matrix.os == 'ubuntu-latest' && matrix.type == 'Debug'
        run: |
          lcov  --capture --directory build --output-file coverage.info --rc lcov_branch_coverage=1
          lcov  --remove  coverage.info '/usr/*' "$VCPKG_ROOT/*" -o coverage.info
          gcovr -r . -s
        shell: bash                                                   # :contentReference[oaicite:5]{index=5}

      # 10) Publication des binaires / rapports
      - name: Upload artifact
        uses: actions/upload-artifact@v4                              # :contentReference[oaicite:6]{index=6}
        with:
          name: promethean-${{ matrix.os }}-${{ matrix.type }}
          path: |
            build/engine_skel*
            coverage.info
            coverage-html/**
